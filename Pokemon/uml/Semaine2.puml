@startuml
'https://plantuml.com/class-diagram

interface Elements {
    int[][] m_tabElt
}

class Pokemon {
    - m_nom: String
    - m_pv: int
    - m_pvMax: int
    - m_attaque: int
    - m_element: int
    + <<constructor>> Pokemon(nom: String)
    + attaquer(pokemonCible: Pokemon): void
    + subirDegats(degats: int): void
    + estVivant(): boolean
    + getNom(): String
    + getPv(): int
    + getPvMax(): int
    + getAttaque(): int
    + getElementString(): String
    + estAvantager(pokemon: Pokemon): boolean
}

class Joueur {
    - m_nom: String
    - m_pioche: Pioche
    - m_main: Main
    - m_defausse: Defausse
    + <<constructor>> Joueur(nom: String, jeu: Jeu, taillePioche: int)
    + piocherPokemon(): void
    + attaquer(terrain: Terrain, adversaire: Joueur): Boolean
    + aPerdu(): boolean
    + getNom(): String
    + getMain(): Main
    + getPioche(): Pioche
    + getDefausse(): Defausse
    + defausser(pokemon: Pokemon): void
    + getPokemon(pokemonCible: int): Pokemon
    + placerPokemon(terrain: Terrain): abstract void
}

class Humain {
    + <<constructor>> Humain(nom: String, jeu: Jeu, taillePioche: int)
    + placerPokemon(terrain: Terrain): void
    + attaquer(terrain: Terrain, adversaire: Joueur): Boolean
}

class Ordinateur {
    + <<constructor>> Ordinateur(nom: String, jeu: Jeu, taillePioche: int)
    + placerPokemon(terrain: Terrain): void
    + attaquer(terrain: Terrain, adversaire: Joueur): Boolean
}

class Pioche {
    - m_pioche: List<Pokemon>
    + <<constructor>> Pioche(jeu: Jeu, taille: int)
    + piocherMain(main: Main): void
    + getM_pioche(): List<Pokemon>
}

class Defausse {
    - m_defausse: List<Pokemon>
    + <<constructor>> Defausse()
    + defausser(pokemon: Pokemon): void
    + getDefausse(): List<Pokemon>
}

class Main {
    - m_listePokemon: List<Pokemon>
    + <<constructor>> Main()
    + ajouterPokemon(pokemon: Pokemon): void
    + retirerPokemon(pokemon: Pokemon): void
    + getListePokemon(): List<Pokemon>
    + getPokemon(): Pokemon
    + getNbPokemon(): int
}

class Jeu {
    - m_j1: Joueur
    - m_j2: Joueur
    - m_terrain: Terrain
    - m_tour: Tour
    - m_listNomPokemon: List<String>
    + <<constructor>> Jeu()
    + jouer(): void
    + initialisationJeu(): void
    + partieTerminee(): boolean
    + getM_listNomPokemon(): List<String>
    + getJoueur1(): Joueur
    + getJoueur2(): Joueur
    + getListNomPokemon(): List<String>
    + getM_terrain(): Terrain
    + genererListNomPokemon(): void
}

class Tour {
    - jeu: Jeu
    - m_nbTour: int
    + <<constructor>> Tour(jeu: Jeu)
    + nouveauTour(): void
    + getM_nbTourString(): String
}

class Terrain {
    - m_pokemonsJoueur1: List<Pokemon>
    - m_pokemonsJoueur2: List<Pokemon>
    + <<constructor>> Terrain()
    + placerPokemons(joueur: Joueur, pokemon: int): void
    + getPokemon(j: Joueur, pokemon: int): Pokemon
    + getNbPokemonsJoueur(mJ1: Joueur): int
    + getM_pokemonsJoueur(joueur: Joueur): List<Pokemon>
    + retirerPokemon(joueur: Joueur, pokemon: int): void
    + estVide(joueur: Joueur): boolean
}

Joueur <|-- Humain
Joueur <|-- Ordinateur

Joueur o-> Pioche : possède
Joueur o-> Pokemon : possède
Joueur o--> Defausse : défausse\n dans
Joueur --> Terrain : joue sur
Joueur .> Terrain : utilise
Tour --> Joueur : appelle
Jeu --> Joueur : contient
Jeu --> Terrain : contient
Jeu --> Tour : contient
Terrain o-->"\nm_pokemons_j1\nm_pokemons_j2" Pokemon : contient
Main *-->"\nm_liste_pokemon" Pokemon : contient
Pioche *-->"\nm_pioche" Pokemon : contient
Defausse *-->"\nm_defausse" Pokemon : contient
Joueur o--> Main : possède

'inheritance relationship'
Joueur <|-- Humain
Joueur <|-- Ordinateur

@enduml

