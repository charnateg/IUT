@startuml
'https://plantuml.com/class-diagram

scale 1
skinparam classFontSyle Bold
skinparam defaultFontStyle 15
hide empty members
skinparam classFontSyle Bold


package affichage {

    class Affichage {
        + {static} accueil()
        + {static} terrain(terrain: Terrain, j1: Joueur, j2: Joueur)
        + {static} affichePokemon(list: Pokemon[0..*])
        + {static} finDePartie(gagnant: Joueur)
        + {static} selectionPokemon(list:Pokemon[0..*])
    }
}

package jeu {

    class Jeu {
        - {static} m_pokemonAvecPouvoir: Pokemon[Pouvoir[0..*]]
        - m_j1: Joueur
        - m_j2: Joueur
        - m_terrain: Terrain
        - m_tour: Tour
        + <<Create>> Jeu()
        + jouer(j1: Joueur, j2: Joueur)
        + initialisationJeu()
        + partieTerminee(): Boolean
        + getJoueur1(): Joueur
        + getJoueur2(): Joueur
        + getTerrain(): Terrain
        + getPokemonAvecPouvoir(): Pokemon[Pouvoir[0..*]]
    }

    class Start {
        + {static} main(args: String[])
    }

    class Tour {
        - jeu: Jeu
        - m_nbTour: Integer
        + <<Create>> Tour(jeu: Jeu)
        + nouveauTour()
        + getNbTourString(): String
    }
}

package joueurs {

    class Humain extends Joueur {
        + <<Create>> Humain(nom: String, taillePioche: Integer)
        + placerPokemon(terrain: Terrain)
        + attaquer(terrain: Terrain, adversaire: Joueur): Boolean {redefines attaquer()}
        + utiliserPouvoir(terrain: Terrain, adversaire: Joueur): Boolean {redefines utiliserPouvoir()}
        + selection(list:Pokemon[0..*]): Integer {redefines selection()}
    }

    abstract class Joueur <<abstract>> {
        ~ m_nom: String
        ~ m_pioche: Pioche
        ~ m_main: Main
        ~ m_defausse: Defausse
        ~ m_tailleTerrain: Integer
        + <<Create>> Joueur(nom: String, taillePioche: Integer)
        + {abstract} attaquer(terrain: Terrain, adversaire: Joueur): Boolean
        + {abstract} utiliserPouvoir(terrain: Terrain, adversaire: Joueur): Boolean
        + {abstract} selection(list:Pokemon[0..*]): Integer
        + {abstract} placerPokemon(terrain: Terrain)
        + piocherPokemon()
        + defausser(pokemon: Pokemon)
        + mort(terrain: Terrain, attaque: Integer): Boolean
        + mort(terrain: Terrain): Boolean
        + viderMain()
        + remplirMain()
        + melangerPioche()
        + ajouterPlaceTerrain()
        + enleverPlaceTerrain()
        + aPerdu(): Boolean
        + getNom(): String
        + getMain(): Main
        + getPioche(): Pioche
        + getDefausse(): Defausse
        + getTailleTerrain(): Integer
        + getPokemon(pokemonCible: Integer): Pokemon
    }

    class Defausse {
        + <<Create>> Defausse()
        + defausser(pokemon: Pokemon)
        + getDefausse(): Pokemon[0..*]
    }

    class Main {
        + <<Create>> Main()
        + ajouterPokemon(pokemon: Pokemon)
        + retirerPokemon(pokemon: Pokemon)
        + getListePokemon(): Pokemon[0..*]
        + getNbPokemon(): Integer
    }

    class Pioche {
       + <<Create>> Pioche(taillePioche: Integer)
        + piocherMain(main: Main)
        + getPioche(): Pokemon[0..*]
    }

    class Terrain {
        + <<Create>> Terrain()
        + placerPokemons(joueur: Joueur, pokemon: Integer)
        + retirerPokemon(joueur: Joueur, pokemon: Integer)
        + estVide(joueur: Joueur): Boolean
        + getPokemon(j: Joueur, pokemon: Integer): Pokemon
        + getNbPokemonsJoueur(mJ1: Joueur): Integer
        + getPokemonsJoueur(joueur: Joueur): Pokemon[0..*]
        + {static} getPouvoirsUtilises(): Pouvoir[Pokemon[0..*]]
    }

    class Ordinateur extends Joueur {
        + <<Create>> Ordinateur(nom: String, taillePioche: Integer)
        + placerPokemon(terrain: Terrain) {redefines placerPokemon()}
        + attaquer(terrain: Terrain, adversaire: Joueur): Boolean {redefines attaquer()}
        + utiliserPouvoir(terrain: Terrain, adversaire: Joueur): Boolean {redefines utiliserPouvoir()}
        + selection(list:Pokemon[0..*]): Integer {redefines selection()}
    }
}

package pokemons {

    package pouvoirs {

        class Confusion extends Pouvoir {
            + <<Create>> Confusion()
            + utiliser(terrain: Terrain, allie: Joueur, adversaire: Joueur, pokemon: Pokemon, intPokemon: Integer) {redefines utiliser()}
            + annulerPouvoir(terrain: Terrain, allie: Joueur, adversaire: Joueur, pokemon: Pokemon) {redefines annulerPouvoir()}
        }

        class ExtensionTerritoire extends Pouvoir {
            + <<Create>> ExtensionTerritoire()
            + utiliser(terrain: Terrain, allie: Joueur, adversaire: Joueur, pokemon: Pokemon, intPokemon: Integer) {redefines utiliser()}
            + annulerPouvoir(terrain: Terrain, allie: Joueur, adversaire: Joueur, pokemon: Pokemon) {redefines annulerPouvoir()}
        }

        class FerveurGuerriere extends Pouvoir {
            + <<Create>> FerveurGuerriere()
            + utiliser(terrain: Terrain, allie: Joueur, adversaire: Joueur, pokemon: Pokemon, intPokemon: Integer) {redefines utiliser()}
            + annulerPouvoir(terrain: Terrain, allie: Joueur, adversaire: Joueur, pokemon: Pokemon) {redefines annulerPouvoir()}
        }

        class Kamikaze extends Pouvoir {
            + <<Create>> Kamikaze()
            + utiliser(terrain: Terrain, allie: Joueur, adversaire: Joueur, pokemon: Pokemon, intPokemon: Integer) {redefines utiliser()}
            + annulerPouvoir(terrain: Terrain, allie: Joueur, adversaire: Joueur, pokemon: Pokemon) {redefines annulerPouvoir()}
        }

        abstract class Pouvoir <<abstract>> {
            - m_nom: String
            ~ m_utilise: Boolean
            - m_desc: String
            + <<Create>> Pouvoir(nom: String)
            + {abstract} utiliser(terrain: Terrain, allie: Joueur, adversaire: Joueur, pokemon: Pokemon, intPokemon: Integer) {redefines utiliser()}
            + {abstract} annulerPouvoir(terrain: Terrain, allie: Joueur, adversaire: Joueur, pokemon: Pokemon) {redefines annulerPouvoir()}
            + getNom(): String
            + getUtilise: Boolean
        }

        class SoinDeZone extends Pouvoir {
           + <<Create>> SoinDeZone()
           + utiliser(terrain: Terrain, allie: Joueur, adversaire: Joueur, pokemon: Pokemon, intPokemon: Integer) {redefines utiliser()}
           + annulerPouvoir(terrain: Terrain, allie: Joueur, adversaire: Joueur, pokemon: Pokemon) {redefines annulerPouvoir()}
       }

       class SoinTotal extends Pouvoir {
           + <<Create>> SoinTotal()
           + utiliser(terrain: Terrain, allie: Joueur, adversaire: Joueur, pokemon: Pokemon, intPokemon: Integer) {redefines utiliser()}
           + annulerPouvoir(terrain: Terrain, allie: Joueur, adversaire: Joueur, pokemon: Pokemon) {redefines annulerPouvoir()}
       }
    }

    class ListePokemons {
        - {static} m_nomsDisponibles: String[0..*]
        - {static} m_nomsUtilises: String[0..*]
        + {static} reinitialiser()
        + {static} getIndexAleatoire() : Integer
        + {static} getNom(): String
    }

    class ListePouvoirs {
        - m_nomsPouvoirs: String[0..*]
        - m_pouvoirsUtilises: String[0..*]
        + ListePouvoirs()
        + {static} reinitialiser()
        + {static} getIndexAleatoire() : Integer
        + {static} getPouvoir(): Pouvoir
    }

    enum Elements {
        EAU
        FEU
        TERRE
        AIR
        - m_element: String
        - m_avantage: String
        - m_desavantage: String
        + Elements(element: String, avantage: String, desavantage: String)
        + getAttaqueAffinite(elementAttaquant: Elements, elementEnnemi: Elements, pokemon: Pokemon): Integer
        + getElement(): String
        + getAvantage(): String
        + getDesavantage(): String
    }

    class Pokemon {
        - m_nom: String
        - m_pvMax: Integer
        - m_pv: Integer
        - m_attaque: Integer
        - m_element: Elements
        - m_pouvoir: Pouvoir
        + <<Create>> Pokemon()
        + attaquer(pokemonCible: Pokemon)
        + subirDegats(degats: Integer)
        + estVivant(): Boolean
        + avantageSur(pokemon: Pokemon): Boolean
        + soigner(soin: Integer)
        + boostAttaque(boost: Integer)
        + getNom(): String
        + getPv(): Integer
        + getPvMax(): Integer
        + getAttaque(): Integer
        + getElementString(): String
        + getNomPouvoir(): String
        + getPouvoir(): Pouvoir
    }
}




Start .> Affichage : <<uses>>
Affichage ..> Jeu : <<uses>>
Jeu *-u--> "1  \n" Tour : > contient
Jeu ..> Tour : <<uses>>
Tour ..> Jeu : <<uses>>



Pokemon -[dashed]--> ListePokemons : uses
Pokemon -[dashed]--> ListePouvoirs : uses
Pokemon "1  " *---> Elements : > est du type
Pokemon "1  " *----> Pouvoir : > possède

Terrain "3" o---> "-m_pokemonsJoueur1\n-m_pokemonsJoueur2\n-m_pouvoirsUtilises\n [3]" Pokemon : > est constitué de
Main "1" o----> "-m_listePokemon\n [0..5]" Pokemon : > est constitué de
Pioche "1" o----> "-m_pioche\n [0..21] "Pokemon : > est constitué de
Defausse "1" o----> "-m_defausse\n [0..21] "Pokemon : > est constitué de

Joueur "1" *---> Main : > possède
Joueur "1" *---> Pioche : > possède
Joueur "1" *---> Defausse: > possède

Jeu *---> Joueur : > contient
Jeu *---> Terrain : > contient

@enduml

