@startuml
'https://plantuml.com/class-diagram

scale 1
skinparam classFontSyle Bold
skinparam defaultFontStyle 15
hide empty members
skinparam classFontSyle Bold


package affichage {

    class Affichage {
        + {static} accueil()
        + {static} finDePartie(gagnant: Joueur)
        + {static} selectionPokemon(list:Pokemon[*]): String
        + {static} terrain(terrain: Terrain, j1: Joueur, j2: Joueur)
        + {static} mettreEnCouleur(texte: String, couleur: String): String
        + {static} mettreEnGras(texte: String): String
        + {static} afficher(message: String)
        + {static} afficherTexteCentre(texte: String, largeurTerminal: Integer)
        + {static} afficheMainOrdinateur(list: Pokemon[*])
        + {static} affichePokemon(list: Pokemon[*])
        + {static} afficheTerrainJoueur(list: Pokemon[*], tailleTerrain: Integer)
        + {static} afficheNbTour(tour: String)
        + {static} afficheDefausse(joueur: Joueur, defausse: Pokemon[*])
    }

    class Musique {
        - isLooping: Boolean
        + <<Create>> Musique(path: String)
        + play()
        + stop()
        + loop()
    }
}

package jeu {

    class Jeu {
        + <<Create>> Jeu()
        + initialisationJeu()
        + initialiserJoueur()
        + jouer(j1: Joueur, j2: Joueur)
        + partieTerminee(): Boolean
        + ajouterPokeAPouvoir(pokemon: Pokemon, pouvoir Pouvoir)
        + getJoueur1(): Joueur
        + getJoueur2(): Joueur
        + getTerrain(): Terrain
        + {static} getPokemonAvecPouvoir: Hashtable<Pokemon, Pouvoir>
        + getVainqueur(): Joueur
    }

    class Start {
        + {static} main(args: String[])
    }

    class Tour {
        - m_nbTour: Integer
        + <<Create>> Tour(jeu: Jeu)
        + nouveauTour()
        + attaquer(joueur: Joueur, adversaire: Joueur): Boolean
        + getNbTourString(): String
    }
}

package joueurs {

    class Humain extends Joueur {
        + <<Create>> Humain(nom: String, taillePioche: Integer)
        + placerPokemon(terrain: Terrain)
        + descriptionPouvoir(list: Pokemon[*])
        + attaquer(terrain: Terrain, adversaire: Joueur): Boolean {redefines}
        + utiliserPouvoir(terrain: Terrain, adversaire: Joueur): Boolean {redefines}
        + selection(borne: Interger): Integer {redefines}
    }

    abstract class Joueur <<abstract>> {
        ~ m_nom: String
        ~ m_tailleTerrain: Integer
        + <<Create>> Joueur(nom: String, taillePioche: Integer)
        + {abstract} attaquer(terrain: Terrain, adversaire: Joueur): Boolean
        + {abstract} utiliserPouvoir(terrain: Terrain, adversaire: Joueur): Boolean
        + {abstract} selection(borne: Interger): Integer
        + {abstract} placerPokemon(terrain: Terrain)
        + melangerPioche()
        + piocherPokemon()
        + defausser(pokemon: Pokemon)
        + mort(terrain: Terrain, attaque: Integer): Boolean
        + mort(terrain: Terrain): Boolean
        + viderMain()
        + remplirMain()
        + modifPlaceTerrain(modif: Integer)
        + aPerdu(): Boolean
        + getNom(): String
        + getMain(): Main
        + getPioche(): Pioche
        + getDefausse(): Defausse
        + getTailleTerrain(): Integer
        + getPokemon(pokemonCible: Integer): Pokemon
        + getPokePouvoir(terrain: Terrain, list: Pokemon[*])
    }

    class Defausse {
        + <<Create>> Defausse()
        + ajouterPokemon(pokemon2: Pokemon)
        + retirerPokemon(choix: Integer)
        + defausser(pokemon: Pokemon)
        + getDefausse(): Pokemon[*]
    }

    class Main {
        + <<Create>> Main()
        + ajouterPokemon(pokemon: Pokemon)
        + retirerPokemon(pokemon: Pokemon)
        + getListePokemon(): Pokemon[*]
        + getPokemon(): Pokemon
        + getNbPokemon(): Integer
    }

    class Pioche {
        + <<Create>> Pioche(taillePioche: Integer)
        + piocherMain(main: Main)
        + getPioche(): Pokemon[*]
    }

    class Terrain {
        + <<Create>> Terrain()
        + placerPokemon(joueur: Joueur, pokemon: Pokemon)
        + retirerPokemons(joueur: Joueur, pokemon: Integer)
        + estVide(joueur: Joueur): Boolean
        + getPokemon(j: Joueur, pokemon: Integer): Pokemon
        + getNbPokemonsJoueur(mJ1: Joueur): Integer
        + getPokemonsJoueur(joueur: Joueur): Pokemon[*]
        + {static} getPouvoirsUtilises(): Hashtable<Pouvoir, Pokemon>
    }

    class Ordinateur extends Joueur {
        + <<Create>> Ordinateur(nom: String, taillePioche: Integer)
        + trouverCiblesPotentielles(terrain: Terrain, adversaire: Joueur, indexAttaquant: int): Integer[*]
        + choisirCibleAttaquer(pokemonAttaquer: Integer[*], indexAttaquant: Integer, terrain: Terrain, adversaire: Joueur): Integer
        + filtrerCiblesParPv(pokemonAttaquer, Integer[*], terrain: Terrain, adversaire: Joueur): Integer[*]
        + attaquerJoueur(index: Integer, i: Integer, terrain: Terrain, adversaire: Joueur, pokemonAttaquer: Interger[*]): Interger
        + placerPokemon(terrain: Terrain) {redefines}
        + attaquer(terrain: Terrain, adversaire: Joueur): Boolean {redefines}
        + selection(borne: Integer): Integer {redefines}
        + utiliserPouvoir(terrain: Terrain, adversaire: Joueur): Boolean {redefines}
    }
}

package pokemons {

    package pouvoirs {

        class AlleKahida extends Pouvoir {
            + <<Create>> AlleKahida()
            + utiliser(terrain: Terrain, allie Joueur, adversaire: Joueur, pokemon: Pokemon, intPokemon: Integer) {redefines}
            + utilisertest(terrain: Terrain, allie: Joueur, adversaire: Joueur, pokemon: Pokemon, intPokemon: Integer, choix: Integer) {redefines}
            + annulerPouvoir(terrain: Terrain, allie: Joueur, adversaire: Joueur, pokemon: Pokemon) {redefines}
        }

        class Confusion extends Pouvoir {
            + <<Create>> Confusion()
            + utiliser(terrain: Terrain, allie: Joueur, adversaire: Joueur, pokemon: Pokemon, intPokemon: Integer) {redefines}
            + utilisertest(terrain: Terrain, allie: Joueur, adversaire: Joueur, pokemon: Pokemon, intPokemon: Integer, choix: Integer) {redefines}
            + annulerPouvoir(terrain: Terrain, allie: Joueur, adversaire: Joueur, pokemon: Pokemon) {redefines}
        }

        class ExtensionTerritoire extends Pouvoir {
            + <<Create>> ExtensionTerritoire()
            + utiliser(terrain: Terrain, allie: Joueur, adversaire: Joueur, pokemon: Pokemon, intPokemon: Integer) {redefines}
            + utilisertest(terrain: Terrain, allie: Joueur, adversaire: Joueur, pokemon: Pokemon, intPokemon: Integer, choix: Integer) {redefines}
            + annulerPouvoir(terrain: Terrain, allie: Joueur, adversaire: Joueur, pokemon: Pokemon) {redefines}
        }

        class FerveurGuerriere extends Pouvoir {
            + <<Create>> FerveurGuerriere()
            + utiliser(terrain: Terrain, allie: Joueur, adversaire: Joueur, pokemon: Pokemon, intPokemon: Integer) {redefines}
            + utilisertest(terrain: Terrain, allie: Joueur, adversaire: Joueur, pokemon: Pokemon, intPokemon: Integer, choix: Integer) {redefines}
            + annulerPouvoir(terrain: Terrain, allie: Joueur, adversaire: Joueur, pokemon: Pokemon) {redefines}
        }

        class Kamikaze extends Pouvoir {
            + <<Create>> Kamikaze()
            + utiliser(terrain: Terrain, allie: Joueur, adversaire: Joueur, pokemon: Pokemon, intPokemon: Integer) {redefines}
            + utilisertest(terrain: Terrain, allie: Joueur, adversaire: Joueur, pokemon: Pokemon, intPokemon: Integer, choix: Integer) {redefines}
            + annulerPouvoir(terrain: Terrain, allie: Joueur, adversaire: Joueur, pokemon: Pokemon) {redefines}
        }

        class Necromancie extends Pouvoir {
            + <<Create>> Necromancie()
            + utiliser(terrain: Terrain, allie: Joueur, adversaire: Joueur, pokemon: Pokemon, intPokemon: Integer) {redefines}
            + utilisertest(terrain: Terrain, allie: Joueur, adversaire: Joueur, pokemon: Pokemon, intPokemon: Integer, choix: Integer) {redefines}
            + annulerPouvoir(terrain: Terrain, allie: Joueur, adversaire: Joueur, pokemon: Pokemon) {redefines}
        }

        abstract class Pouvoir <<abstract>> {
            - m_nom: String
            ~ m_utilise: Boolean
            - m_desc: String
            + <<Create>> Pouvoir(nom: String, desc String)
            + {abstract} utiliser(terrain: Terrain, allie: Joueur, adversaire: Joueur, pokemon: Pokemon, intPokemon: Integer)
            + {abstract} utilisertest(terrain: Terrain, allie: Joueur, adversaire: Joueur, pokemon: Pokemon, intPokemon: Integer, choix: Integer)
            + {abstract} annulerPouvoir(terrain: Terrain, allie: Joueur, adversaire: Joueur, pokemon: Pokemon)
            + getNom(): String
            + getUtilise(): Boolean
            + getDesc(): String
        }

        class Resistance extends Pouvoir {
           + <<Create>> Resistance()
           + utiliser(terrain: Terrain, allie: Joueur, adversaire: Joueur, pokemon: Pokemon, intPokemon: Integer) {redefines}
           + utilisertest(terrain: Terrain, allie: Joueur, adversaire: Joueur, pokemon: Pokemon, intPokemon: Integer, choix: Integer) {redefines}
           + annulerPouvoir(terrain: Terrain, allie: Joueur, adversaire: Joueur, pokemon: Pokemon) {redefines}
       }

        class SoinDeZone extends Pouvoir {
           + <<Create>> SoinDeZone()
           + utiliser(terrain: Terrain, allie: Joueur, adversaire: Joueur, pokemon: Pokemon, intPokemon: Integer) {redefines}
           + utilisertest(terrain: Terrain, allie: Joueur, adversaire: Joueur, pokemon: Pokemon, intPokemon: Integer, choix: Integer) {redefines}
           + annulerPouvoir(terrain: Terrain, allie: Joueur, adversaire: Joueur, pokemon: Pokemon) {redefines}
       }

       class SoinTotal extends Pouvoir {
           + <<Create>> SoinTotal()
           + utiliser(terrain: Terrain, allie: Joueur, adversaire: Joueur, pokemon: Pokemon, intPokemon: Integer) {redefines}
           + utilisertest(terrain: Terrain, allie: Joueur, adversaire: Joueur, pokemon: Pokemon, intPokemon: Integer, choix: Integer) {redefines}
           + annulerPouvoir(terrain: Terrain, allie: Joueur, adversaire: Joueur, pokemon: Pokemon) {redefines}
       }
    }

    class GenerateurPokemon {
        - {static} m_nomsDisponibles: String[*]
        - {static} m_nomsUtilises: String[*]
        + {static} getIndexAleatoire() : Integer
        + {static} attribuerNom(): String
        + {static} attribuerPouvoir(): Pouvoir
        + {static} reinitialiser()
        + {static} creePokemon(): Pokemon



        + {static} getNomsDisponibles(): String[*]
        + {static} getNomsUtilises(): String[*]
        + {static} getIndexPouvoirAleatoire(): Integer
        + {static} getNomsPouvoirs(): Pouvoir[*]
        + {static} getPouvoirsUtilises(): Pouvoir[*]
    }

    enum Elements {
        EAU
        FEU
        TERRE
        AIR
    }

    class Affinite {
        - m_element: String
        - m_avantage: String
        - m_desavantage: String
        + <<Create>> Affinite(element: Elements)
        + getAttaqueAffinite(elementAttaquant: Affinite, elementEnnemi: Affinite, pokemon: Pokemon): Integer
        + getElement(): String
        + getAvantage(): String
        + getDesavantage(): String
    }

    class Pokemon {
        - m_nom: String
        - m_pvMax: Integer
        - m_pv: Integer
        - m_attaque: Integer
        - m_defense: Integer
        + <<Create>> Pokemon(nom: String, pouvoir: Pouvoir)
        + attaquer(pokemonCible: Pokemon)
        + subirDegats(degats: Integer)
        + estVivant(): Boolean
        + avantageSur(pokemon: Pokemon): Boolean
        + soigner(soin: Integer)
        + modifAttaque(boost: Integer)
        + modifDefense(defense: Integer)
        + getNom(): String
        + getPv(): Integer
        + getPvMax(): Integer
        + getAttaque(): Integer
        + getElementString(): String
        + getNomPouvoir(): String
        + getPouvoir(): Pouvoir
        + getDefense(): Integer
    }
}

package tests {
    class TestPouvoir {
        + setUp()
        + testAlleKahida()
        + testConfusion()
        + testExtensionTerritoire()
        + testFerveurGuerriere()
        + testKamikaze()
        + testNecromancie()
        + testResistance()
        + testSoinDeZone()
        + testSoinTotal()
    }
}



Start .> Jeu : <<instantiate>>

Jeu *---> "1\n- m_j1" Joueur : > contient
Jeu *---> "1\n- m_J2" Joueur : > contient
Jeu o---> "*\n- m_pokemonAvecPouvoir" Pouvoir : > possède
Jeu *---> "1\n- m_terrain" Terrain : > contient
Jeu *---> "*\n- m_tour" Tour : > contient
Jeu .> Affichage : <<uses>>
Jeu *---> "*\n- m_musiqueDeFond\n- m_bruitage" Musique : > utilise


Tour o--> "1\n- m_jeu" Jeu : > est dans
Tour ..> Affichage : <<uses>>

Defausse *----> "0..21\n- m_defausse" Pokemon : > contient

Humain .> Pokemon : <<instantiate>>
Humain .> Musique : <<instantiate>>

Joueur *----> "1\n- m_pioche" Pioche : > possède
Joueur *----> "1\n- m_main" Main : > possède
Joueur *----> "1\n- m_defausse" Defausse : > possède
Joueur .left.> Terrain : <<uses>>

Main *----> "0..5\n- m_listePokemon" Pokemon : > possède

Ordinateur .> Pokemon : <<instantiate>>
Ordinateur .> Musique : <<instantiate>>

Pioche *----> "0..21\n- m_pioche" Pokemon : > possède

Terrain *---> "*\n- m_pokemonsJoueur1\n- m_pokemonsJoueur2\n- m_pouvoirsUtilises" Pokemon : > possède

Affinite .> Elements : <<uses>>

GenerateurPokemon *---> "*\n- m_nomsPouvoirs" Pouvoir : > utilise
GenerateurPokemon *---> "*\n- m_pouvoirsUtilises" Pouvoir : > utilise
GenerateurPokemon .> Pokemon : <<instantiate>>

Pokemon *-right-> "1\n- m_affinite" Affinite : > possède
Pokemon o---> "0..1\n- m_pouvoir" Pouvoir : > possède

TestPouvoir *---> "*\n- joueur1\n- joueur2" Joueur : > teste
TestPouvoir *---> "*\n- terrain" Terrain : > teste
TestPouvoir *---> "*\n- pokemon1\n- pokemon" Pokemon : > teste
TestPouvoir .> Pouvoir : <<instantiate>>


AlleKahida *---> "*\n- m_bruitage" Musique : > utilise
Confusion *---> "*\n- m_bruitage" Musique : > utilise
ExtensionTerritoire *---> "*\n- m_bruitage" Musique : > utilise
FerveurGuerriere *---> "*\n- m_bruitage" Musique : > utilise
Kamikaze *---> "*\n- m_bruitage" Musique : > utilise
Necromancie *---> "*\n- m_bruitage" Musique : > utilise
Resistance *---> "*\n- m_bruitage" Musique : > utilise
SoinDeZone *---> "*\n- m_bruitage" Musique : > utilise
SoinTotal *---> "*\n- m_bruitage" Musique : > utilise

@enduml

