@startuml
'https://plantuml.com/class-diagram

class Pokemon {
    + <<constructor>> Pokemon()
    - m_nom: String
    - m_pv: int
    - m_pvMax: int
    - m_attaque: int
    - m_element: int
    + attaquer(p: Pokemon): void
    + subirDegats(degats: int): void
    + estVivant(): boolean
    + afficher(): void
}

class Joueur {
    - m_nom: String
    - m_pile: Pioche
    - m_main: Main
    + <<constructor>> Joueur(nom: String)
    + ajouterPokemon(p: Pokemon): void
    + retirerPokemon(): Pokemon
    + piocherPokemon(): Pokemon
    + defausser(): void
}

class Ordinateur {
}

class Pioche {
    + <<constructor>> Pioche(Jeu:jeu, Integer:taille)
    + piocher(): Pokemon
}

class Defausse {
    + <<constructor>> Defausse()
    + defausser(): void
}

class Main {
    + piocher(): void
    + poser(): void
}

class Jeu {
    + <<constructor>> Jeu()
    - m_j1: Joueur
    - m_j2: Joueur
    - m_terrain: Terrain
    - m_tour: Tour
    + m_nomMaxPokemon: int
    + m_tabElt: int[][]
    + m_listePokemon: List<Pokemon>
    + jouer(): void
    + finirTour(): void
    + estFini(): boolean
}

class Tour {
    + <<constructor>> Tour(j: Joueur)
    - m_joueur: Joueur
    + changerJoueur(): void
    + piocher(): void
    + defausser(): void
    + attaquer(): void
    + finirTour(): void
}

class Terrain {
    + <<constructor>> Terrain()
    + defausser(): void
}

Joueur o-> Pioche : possède
Joueur o-> Pokemon : possède
Joueur o--> Defausse : défausse\n dans
Joueur --> Terrain : joue sur
Joueur .> Terrain : utilise
Tour --> Joueur : appelle
Jeu --> Joueur : contient
Jeu --> Terrain : contient
Jeu --> Tour : contient
Terrain o-->"\nm_cartes_j1\nm_cartes_j2" Pokemon : contient
Main *-->"\nm_main" Pokemon : contient
Pioche *-->"\nm_pioche" Pokemon : contient
Defausse *-->"\nm_defausse" Pokemon : contient
Joueur o--> Main : possède

'inheritance relationship'
Joueur <|-- Ordinateur

@enduml
